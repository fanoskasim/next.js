[
    Conditional {
        condition: Binary(
            3,
            Variable(
                (
                    "src",
                    #3,
                ),
            ),
            StrictEqual,
            Constant(
                Str(
                    Atom(
                        ".",
                    ),
                ),
            ),
        ),
        kind: IfElse {
            then: EffectsBlock {
                effects: [
                    Unreachable {
                        start_ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    1,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                Decl,
                            ),
                            Decl(
                                Fn,
                            ),
                            FnDecl(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Break,
                            ),
                        ],
                    },
                ],
                range: Exact(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                1,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            For,
                        ),
                        ForStmt(
                            Body,
                        ),
                        Stmt(
                            Block,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            If,
                        ),
                        IfStmt(
                            Cons,
                        ),
                    ],
                ),
            },
            else: EffectsBlock {
                effects: [
                    Unreachable {
                        start_ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    1,
                                ),
                            ),
                            ModuleItem(
                                Stmt,
                            ),
                            Stmt(
                                Decl,
                            ),
                            Decl(
                                Fn,
                            ),
                            FnDecl(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                Return,
                            ),
                        ],
                    },
                ],
                range: StartAfter(
                    [
                        Program(
                            Module,
                        ),
                        Module(
                            Body(
                                1,
                            ),
                        ),
                        ModuleItem(
                            Stmt,
                        ),
                        Stmt(
                            Decl,
                        ),
                        Decl(
                            Fn,
                        ),
                        FnDecl(
                            Function,
                        ),
                        Function(
                            Body,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            For,
                        ),
                        ForStmt(
                            Body,
                        ),
                        Stmt(
                            Block,
                        ),
                        BlockStmt(
                            Stmts(
                                0,
                            ),
                        ),
                        Stmt(
                            If,
                        ),
                    ],
                ),
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Body,
            ),
            Stmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
        ],
        span: 89..125,
        in_try: false,
    },
    Unreachable {
        start_ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Body,
            ),
            Stmt(
                Block,
            ),
        ],
    },
    ImportedBinding {
        esm_reference_index: 1,
        export: Some(
            "assert",
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Ident,
            ),
        ],
        span: 147..153,
        in_try: false,
    },
    Call {
        func: Member(
            3,
            Module(
                ModuleValue {
                    module: "./assert",
                    annotations: ImportAnnotations {
                        map: {},
                    },
                },
            ),
            Constant(
                Str(
                    Atom(
                        "assert",
                    ),
                ),
            ),
        ),
        args: [
            Value(
                Constant(
                    Num(
                        ConstantNumber(
                            1.0,
                        ),
                    ),
                ),
            ),
            Value(
                Constant(
                    Num(
                        ConstantNumber(
                            1.0,
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    1,
                ),
            ),
            ModuleItem(
                Stmt,
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Fn,
            ),
            FnDecl(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                Expr,
            ),
            ExprStmt(
                Expr,
            ),
            Expr(
                Call,
            ),
        ],
        span: 147..159,
        in_try: false,
        new: false,
    },
]
